// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array buff;
    field int buff_size;
    field int str_len;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength = 0) {
            let maxLength = 1;
        }
        let buff = Array.new(maxLength);
        let buff_size = maxLength;
        let str_len = 0;

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Array.dispose(buff);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return str_len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return buff[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let buff[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(str_len < buff_size) {
            let buff[str_len] = c;
            let str_len = str_len + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(str_len > 0) {
            let str_len = str_len - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int result, i;
        var boolean neg;

        // (char)(45) represents '-'
        if(buff[0] = 45) {
            let neg = true;
            let i = 1;
        }
        else {
            let neg = false;
            let i = 0;
        }

        let result = 0;
        while(i < str_len)) {
            var int d;
            let d = buff[i] - 48;
            let result = result * 10 + d;
            let i = i + 1;
        }
        return result;
    }

    function void int2String(int n) {
        var int lastDigit, charDigit, q;
        let lastDigit = Math.mod(n, 10);
        let charDigit = lastDigit + 48;
        let q = n / 10;

        if(n < 10) {
            do appendChar(charDigit);
        }
        else {
            do int2String(q);
            do appendChar(charDigit);
        }
        return;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let str_len = 0;
        if(val < 0) {
            let val = -val;
            do appendChar(45); // '-'
        }
        do int2String(val);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128; // (char)(128) represents '\n'
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129; // (char)(129) represents backSpace
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34; // (char)(34) represents double quote (")
    }
}
