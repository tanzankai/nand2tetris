// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static boolean white;
    static boolean black;
    static boolean cur_color;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384; // Screen address starts at 16384.
        let white = false;
        let black = true;
        let cur_color = black;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while(i < 8192) {
            let screen[i] = white;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let cur_color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address;
        var int bitmask;
        let address = y * 32 + x / 16;
        let bitmask = Math.two_to_the(x & 15); // x & 0000 0000 0000 1111

        // paint the pixel black
        if(cur_color) {
            screen[address] = screen[address] | bitmask;
        }
        // paint the pixel white
        else {
            screen[address] = screen[address] & ~bitmask;
        }
        return;
    }

    function void drawLine_vertically(int y1, int y2, int x) {
        if(y2 < y1) {
            var int temp;
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        while(~(y2 < y1)) {
            do Screen.drawPixel(x, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    function void draw_horizontal_line(int x1, int x2, int y) {
        while(~(x1 > x2)) {
            do Screen.drawPixel(x1, y);
            let x1 = x1 + 1;
        }
        return;
    }

    function void drawLine_horizontally(int x1, int x2, int y) {
        var int addr_bg, addr_en;
        var int x1mod16, x2mod16;
        // and filter 0000 0000 0000 1111
        let x1mod16 = x1 & 15;
        let x2mod16 = x2 & 15;

        let addr_bg = y * 32 + x1 / 16;
        let addr_en = y * 32 + x2 / 16 + (x2mod16 = 0);

        if(addr_bg = addr_en) {
            do Screen.draw_horizontal_line(x1, x2, y);
        }
        else {
            if(~(x1mod16 = 0)) {
                let addr_bg = addr_bg + 1;
                do Screen.draw_horizontal_line(x1, x1 + 16 - x1mod16, y);
            }
            if(~(x2mod16 = 0)) {
                let addr_en = addr_en - 1;
                do Screen.draw_horizontal_line(x2 - x2mod16, x2, y);
            }
            while(~(addr_bg > addr_en)) {
                let screen[addr_bg] = cur_color;
                let addr_bg = addr_bg + 1;
            }
        }
        return;
    }

    function void drawLine_normally(int x1, int y1, int dx, int dy) {
        var int a, b, adyMinusbdx, y_sgn;
        let a = 0;
        let b = 0;
        let adyMinusbdx = 0;

        if(dy < 0) {
            let y_sgn = -1;
        }
        else {
            let y_sgn = 1;
        }

        while( ~(a > dx) & ( ((y_sgn = 1) & ~(b > dy)) | ((y_sgn = -1) & ~(b < dy)) ) ) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if(adyMinusbdx < 0) {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + dy * y_sgn;
            }
            else {
                let b = b + y_sgn;
                let adyMinusbdx = adyMinusbdx - dx;
            }
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        if(x1 > x2) {
            var int temp_x, temp_y;
            let temp_x = x1;
            let x1 = x2;
            let x2 = temp_x;
            let temp_y = y1;
            let y1 = y2;
            let y2 = temp_y;
        }
        var int dx, dy;
        let dx = x2 - x1;
        let dy = y2 - y1;

        // Division into cases(dx = 0 or dy = 0 or otherwise).
        if(dx = 0) {
            do drawLine_vertically(y1, y2, x1);
        }
        else {
            if(dy = 0) {
                do drawLine_horizontally(x1, x2, y1);
            }
            else {
                do drawLine_normally(x1, y1, dx, dy);
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        let y = y1;
        while(~(y > y2)) {
            do Screen.drawLine_horizontally(x1, x2, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, d, diff;
        let dy = -r;
        while(~(dy > r)) {
            let diff = r * r - dy * dy;
            let d = Math.sqrt(diff);
            do Screen.drawLine_horizontally(x - d, x + d, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
